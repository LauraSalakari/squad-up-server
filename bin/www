#!/usr/bin/env node

const http = require('http');
const socket = require("socket.io");
const MessageModel = require("../models/Message.model");

let app = require('../app');

// catch 404 and render a not-found.hbs template
app.use((req, res, next) => {
  res.status(404);
  res.render('not-found');
});

app.use((err, req, res, next) => {
  // always log the error
  console.error('ERROR', req.method, req.path, err);

  // only render if the error ocurred before sending the response
  if (!res.headersSent) {
    res.status(500);
    res.render('error');
  }
});

let server = http.createServer(app);

server.on('error', error => {
  if (error.syscall !== 'listen') { throw error }

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`Port ${process.env.PORT} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`Port ${process.env.PORT} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
});

let socketSerrver = server.listen(process.env.PORT, () => {
  console.log(`Listening on http://localhost:${process.env.PORT}`);
});

// Socket.io stuff
io = socket(socketSerrver);

io.on("connection", (socket) => {
  console.log("id", socket.id);

  socket.on("join_room", (data) => {
    
    socket.join(data);
    console.log("User Joined Room: " + data);
  });

  socket.on("send_message", (data) => {
    console.log("send data", data);
    let {room, senderId, senderName, content} = data;
    MessageModel.create({
      room,
      content,
      senderId,
      senderName
    })
    .then((msg) => {
      socket.to(data.room).emit("receive_message", msg);
    })
  });

  socket.on("disconnect", () => {
    console.log("USER DISCONNECTED");
  });
});




